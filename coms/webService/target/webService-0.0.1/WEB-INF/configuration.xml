<beans:beans xmlns="http://www.springframework.org/schema/security" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"	
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	 
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/security 
        http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/security/oauth2 
        http://www.springframework.org/schema/security/spring-security-oauth2.xsd">
 	
	<tx:annotation-driven/>
	<context:component-scan base-package="com.unlimitedcompanies.coms"/>
	<beans:bean class="com.unlimitedcompanies.coms.data.config.ApplicationConfig"/>
	
	<!-- switch on the default http message converters -->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"/>
	
	<beans:bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		
		<!-- Deactivate strategy 1 - no extensions will be supported -->
		<beans:property name="favorPathExtension" value="false"/>
		
		<!-- Activate and setup strategy 2 - supporting query parameters and setting parameter name to mediaType -->
		<beans:property name="favorParameter" value="true"/>
		<beans:property name="parameterName" value="mediaType"/>
		<beans:property name="mediaTypes">
			<beans:map>
				<beans:entry key="json" value="application/json"/>
				<beans:entry key="xml" value="application/xml"/>
			</beans:map>
		</beans:property>
		
		<!-- Activate strategy 3 - supporting headers accept format / Default setting -->
		<beans:property name="ignoreAcceptHeader" value="false"/>
	</beans:bean>
	
        
  	<!-- OAuth2 Authorization Endpoint settings -->
 	<oauth2:authorization-server client-details-service-ref="clientDetailsService">
 		<oauth2:authorization-code/>
 	</oauth2:authorization-server>
 	
 	<beans:bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
 		<beans:constructor-arg ref="clientDetailsService"/>
 	</beans:bean>
 	
 	<oauth2:client-details-service id="clientDetailsService">
 		<oauth2:client client-id="comsClient"
 					   authorized-grant-types="authorization_code"
 					   authorities="ROLE_CLIENT"
 					   scope="read"
 					   secret="{noop}somesecret"
 					   redirect-uri="http://localhost:8080/coms/contacts"/>
 	</oauth2:client-details-service>
 	
 	
 	
 	
	
	
 	
 	
 	<!-- do not apply security to css files -->
 	<http pattern="/css/**" security="none"/>
 	
 	<beans:bean name="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
 
 	<authentication-manager id="generalAuthManager">
 		<authentication-provider>
 			<jdbc-user-service data-source-ref="productionDataSource"
 							   users-by-username-query="select username, password, enabled from user where username = ?"
 							   authorities-by-username-query="select * from role INNER JOIN user_role ON user_role.role_FK = role.roleId INNER JOIN user ON user.username = ?"/>
			<password-encoder ref="bcryptEncoder"/>
 		</authentication-provider>
 	</authentication-manager>
 	
 	<!-- second manager for the electronic clients ONLY -->
 	<authentication-manager id="oauthTokenEndpointAuthManager">
 		<authentication-provider user-service-ref="clientDetailsUserService"/>
 	</authentication-manager>
 	
 	<!-- OAuth helper beans -->
 	<beans:bean id="oauthTokenEntrypoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"/>
 	<oauth2:resource-server id="oauthResourceServerFilter"/>
 	<beans:bean id="expressionHandler" class="org.springframework.security.oauth2.provider.expression.OAuth2WebSecurityExpressionHandler"/>
 	
 	<!-- Settings for REST services -->
 	<http pattern="/rest/**" create-session="stateless" entry-point-ref="oauthTokenEntrypoint">
 		<intercept-url pattern="/rest/**" access="#oauth2.hasScope('read')"/>
 		<custom-filter ref="oauthResourceServerFilter" before="PRE_AUTH_FILTER"/>
 		<expression-handler ref="expressionHandler"/>
 	</http>
 	
 	<!-- Specific settings for the token endpoing -->
 	<http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="oauthTokenEndpointAuthManager">
 		<intercept-url pattern="/oauth/token" access="hasRole('ROLE_CLIENT')"/>
 		<http-basic/>
 		<csrf disabled="true"/>
 	</http>
 	
 	<!-- Settings for Web security -->
 	<http pattern="/**" authentication-manager-ref="generalAuthManager">
 		<intercept-url pattern="/pages/login.jsp" access="permitAll()"/>
 		<intercept-url pattern="/login" access="permitAll()"/>
 		<intercept-url pattern="/**" access="isAuthenticated()"/>
 		
 		<form-login login-page="/pages/login.jsp" login-processing-url="/login"/>
 					
		<csrf disabled="true"/>
 	</http>
 	
</beans:beans>